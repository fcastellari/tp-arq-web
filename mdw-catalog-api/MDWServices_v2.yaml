openapi: 3.0.0
# Added by API Auto Mocking Plugin
servers:
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/fcastellari/MDWServicessss/1.0.0
info:
  description: MDW Services Catalog API
  version: "1.0.0"
  title: MDW Services Catalog
  contact:
    email: federico.castellari@gmail.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
tags:
  - name: owners
    description: Manage PO's
  - name: services
    description: Access MDW Services Info
  - name: domains
    description: Operations about Domains
    
paths:
  /owners:
    get:
      tags:
        - owners
      summary: search for owners
      operationId: searchOwner
      description: |
        By passing in the appropriate options, you can search for
        available domains in the system
      parameters:
        - in: query
          name: searchString
          description: pass an optional search string for looking up owners
          required: false
          schema:
            type: string
        - in: query
          name: skip
          description: number of records to skip for pagination
          schema:
            type: integer
            format: int32
            minimum: 0
        - in: query
          name: limit
          description: maximum number of records to return
          schema:
            type: integer
            format: int32
            minimum: 0
            maximum: 50
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Owner'
        '400':
          description: bad input parameter
    post:
      tags:
        - owners
      summary: add a new owner
      operationId: addOwner
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Owner'
      responses:
        '200':
          description: owner added
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Owner'
        '400':
          description: invalid owner  
  '/owners/{userName}':
    get:
      tags:
        - owners
      operationId: getOwnerByUserName
      summary: get services by User Name
      parameters:
        - name: userName
          in: path
          required: true
          description: userName that needs to be fetched
          schema:
            type: string
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Owner'
        '404':
          description: userName does not exist
    put:
      tags:
        - owners
      summary: update an owner
      operationId: updateOwner
      parameters:
        - name: userName
          in: path
          required: true
          description: User Name that needs to be fetched
          schema:
            type: string
      responses:
        '200':
          description: owner updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Owner'
        '400':
          description: invalid service
        '404':
          description: integrationId does not exist
  /services:
    get:
      tags:
        - services
      summary: search for services
      operationId: getServices
      parameters: []
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Service'
    post:
      tags:
        - services
      summary: add a new service
      operationId: addService
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Service'
      responses:
        '200':
          description: service added
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'
        '400':
          description: invalid service
          
  '/services/{integrationId}':
    get:
      tags:
        - services
      operationId: getServiceByIntegrationId
      summary: get services by Integration ID
      parameters:
        - name: integrationId
          in: path
          required: true
          description: Integration ID that needs to be fetched
          schema:
            type: string
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'
        '404':
          description: integrationId does not exist
    put:
      tags:
        - services
      summary: update a service
      operationId: updateService
      parameters:
        - name: integrationId
          in: path
          required: true
          description: Integration ID that needs to be fetched
          schema:
            type: string
      responses:
        '200':
          description: service updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'
        '400':
          description: invalid service
        '404':
          description: integrationId does not exist
    patch:
      tags: 
        - services
      summary: updates status of a service
      operationId: updateStatus
      parameters: 
        - name: integrationId
          in: path
          required: true
          description: Integration ID that needs to be fetched
          schema:
            type: string
      responses:
        '200':
          description: owner updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Owner'
        '400':
          description: invalid owner
        '404':
          description: owner does not exist
            
      
  '/services/{userName}':
    get:
      tags:
        - services
      operationId: getServiceByuserName
      summary: get services by Owner ID
      parameters:
        - name: userName
          in: path
          required: true
          description: Owner's userName that needs to be fetched
          schema:
            type: string
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'
        '404':
          description: userName does not exist
          
  /domains:
    get:
      tags:
        - domains
      summary: search for domains
      operationId: searchDomain
      description: |
        By passing in the appropriate options, you can search for
        available domains in the system
      parameters:
        - in: query
          name: searchString
          description: pass an optional search string for looking up inventory
          required: false
          schema:
            type: string
        - in: query
          name: skip
          description: number of records to skip for pagination
          schema:
            type: integer
            format: int32
            minimum: 0
        - in: query
          name: limit
          description: maximum number of records to return
          schema:
            type: integer
            format: int32
            minimum: 0
            maximum: 50
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Service'
        '400':
          description: bad input parameter
    post:
      tags:
        - domains
      summary: adds a Middleware domain
      operationId: addDomain
      description: Adds domain to the system
      responses:
        '201':
          description: domain registered
        '400':
          description: invalid domain
        '409':
          description: domain already exists
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Domain'
        description: domain to be added
  '/domains/{name}':
    get:
      tags:
        - domains
      operationId: getDomainName
      summary: get domains by name
      parameters:
        - name: name
          in: path
          required: true
          description: name that needs to be fetched
          schema:
            type: string
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Domain'
        '404':
          description: domain does not exist
    put:
      tags:
        - domains
      summary: update domain
      operationId: updateDomain
      parameters:
        - name: name
          in: path
          required: true
          description: domain name that needs to be fetched
          schema:
            type: string
      responses:
        '200':
          description: domain updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Domain'
        '400':
          description: invalid domain
        '404':
          description: domain name does not exist      
components:
  schemas:
    Service:
      type: object
      required:
        - id
        - integrationId
        - project
        - domain
        - product
        - severity
        - serviceName
        - country
        - businessUnit
        - sourceSystem
        - sourceObjectType
        - targetSystem
        - targetObjectType
        - processOwner
        - status

      properties:
        id:
          type: string
          format: uuid
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
        integrationId:
          type: string
          example: INT1234
        project:
          type: string
          example: VUC
        product:
          type: string
          description: Tecnologia donde esta desarrollada la INT
          enum:
          - Biztalk
          - ODI
          - OSB
        serviceName:
          type: string
          description: Service que se invoca
          example: AltaModClientesSiebel
        domain:
          $ref: '#/components/schemas/Domain'
        severity:
          type: string
          description: Criticidad de la Integracion
          enum:
          - Alta
          - Media
          - Baja
        description:
          type: string
          description: Descripción del servicio
          example: Alta Modificacion Clientes en SIEBEL 
        country:
          type: string
          description: País
          enum:
          - AR
          - BR
          - CL
          - PE
          - CENCO
        businessUnit:
          type: string
          description: Unidad de Negocio
          enum:
          - BO
          - CORP
          - MdH
          - SM
          - TxD
        sourceSystem:
          type: string
          description: Sistema origen de la peticion
          example: Orquestador
        sourceObjectType:
          description: Tipo de objeto de la peticion
          type: string
          example: SOAP
        targetSystem:
          type: string
          description: Sistema destino de la peticion
          example: SIEBEL
        targetObjectType:
          type: string
          description: Tipo de objeto destino de la peticion
          example: SOAP
        schedule:
          type: string
          description: Schedule del servicio
          example: Diariamente cada 15 minutos.
        processOwner:
          $ref: '#/components/schemas/Owner'
        comments: 
          type: string
          description: Some comments
        status:
          type: string
          description: Service status
          enum:
          - activo
          - inactivo
    Domain:
      type: object
      required:
        - name
        - adminConsole
      properties:
        name:
          type: string
          example: osbp_ar_domain
        adminConsole:
          type: string
          format: url
          example: 'g100603sv123:7301/console'
      
    Owner:
      type: object
      required:
        - id
        - name
        - userName
        - mail
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
          description: Nombre y apellido del responsable funcional
          example: Juan Perez
        userName:
         type: string
         description: AD username
         example: FeCastel
        mail:
          type: string
          format: mail
          description: Mail de contacto
          example: juan.perez@empresa.com
        phone:
          type: string
          example: +5491112345678